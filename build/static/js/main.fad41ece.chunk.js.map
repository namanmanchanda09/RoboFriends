{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js","robots.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","Scroll","props","style","overflow","border","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","toLocaleLowerCase","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","username","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAwBeA,EArBF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAEtB,OACI,yBAAKC,UAAU,oDAEX,yBAAKC,IAAI,GAAGC,IAAG,+BAA0BH,KACzC,6BACI,4BAAKF,GACL,2BAAIC,MCSLK,EAhBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OACI,6BAEQA,EAAOC,IAAI,SAACC,EAAKC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACNR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,YCClCW,EAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WCUJC,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,yBAAKlB,UAAU,OACX,8BACI,2BAAOmB,KAAK,SACPC,YAAY,gBACXpB,UAAU,mCACVqB,SAAUH,OCoDjBI,G,kBAnDX,aAAc,IAAD,8BACT,+CAeJC,eAAe,SAACC,GACZ,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAfzC,EAAKC,MAAQ,CACTxB,OAAQ,GACRa,YAAY,IAJP,E,iFAQO,IAAD,OACfY,MAAM,8CACLC,KAAK,SAAAC,GAAY,OAAOA,EAASC,SACjCF,KAAK,SAAAG,GAAQ,EAAKR,SAAS,CAACrB,OAAO6B,Q,+BAU/B,IAAD,OACEC,EAAiBC,KAAKP,MAAMxB,OAAOgC,OAAO,SAAAC,GAC5C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKX,MAAMX,YAAYuB,uBAGpE,OAA8B,IAA3BL,KAAKP,MAAMxB,OAAOqC,OACV,uCAIP,yBAAKzC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWkB,aAAciB,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUnB,OAAQ8B,IADtB,U,GApCEQ,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,CAAK7C,OCRC,CAClB,CACEL,GAAI,EACJF,KAAM,gBACNqD,SAAU,OACVpD,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNqD,SAAU,YACVpD,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNqD,SAAU,WACVpD,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNqD,SAAU,WACVpD,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNqD,SAAU,SACVpD,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNqD,SAAU,mBACVpD,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNqD,SAAU,eACVpD,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNqD,SAAU,gBACVpD,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNqD,SAAU,WACVpD,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNqD,SAAU,iBACVpD,MAAO,6BDlDRqD,SAASC,eAAe,SDwHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC,gB","file":"static/js/main.fad41ece.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Card = ({name,email,id}) =>{\n    \n    return(\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            \n            <img alt=\"\" src={`https://robohash.org/${id}`}></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\n\n\n\n\n\n\n \nexport default Card;","import React from 'react'\n// import {robots} from './robots'\nimport Card from './Card'\n\nconst CardList = ({robots}) =>{\n    return(\n        <div>\n            {\n                robots.map((user,i)=>{\n                    return(<Card key={i}\n                                id={robots[i].id}\n                                name={robots[i].name}\n                                email={robots[i].email}\n                            />\n                        )\n                })\n            }\n        </div>\n    )\n}\nexport default CardList;\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\n\n\nconst Scroll = (props) =>{\n    return(\n        <div style={{overflow: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n\n    )\n}\n\n\nexport default Scroll;\n\n\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) =>{\n    return(\n        <div className='pa2'>\n            <form>\n                <input type='search'\n                     placeholder='search robots'\n                      className='pa3 ba b--green bg-lightest-blue'\n                      onChange={searchChange}></input>\n            </form>\n        </div>\n        \n    ) \n}\n\nexport default SearchBox;\n\n\n\n\n","import React, {Component} from 'react'\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\n\n\n\nclass App extends Component{\n    \n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield:''\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>{ return response.json();})\n        .then(users=>{this.setState({robots:users})\n        })\n    }\n\n\n    onSearchChange=(event)=>{\n        this.setState({searchfield: event.target.value})\n\n        \n    }\n    render(){\n        const filteredRobots = this.state.robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLocaleLowerCase());\n        });\n\n        if(this.state.robots.length===0){\n            return(<h1>Loading</h1>)\n        }else{\n\n        return(\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots}/>)\n                </Scroll>\n                \n            </div>\n        \n        );\n\n        }\n\n\n    }\n\n\n}\n \n\nexport default App;\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots'\n\nReactDOM.render(<App robots={robots}/>\n    ,document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];\n  "],"sourceRoot":""}